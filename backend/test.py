from sqlmodel import Field, Session, SQLModel, create_engine, select
from sqlalchemy.ext.asyncio import AsyncSession, async_sessionmaker, create_async_engine


class Hero(SQLModel, table=True):
    # Type defined as int | None because the primary key is autoincrement generated by the database
    id: int | None = Field(default=None, primary_key=True)
    name: str
    secret_name: str
    age: int | None = None


mariadb_url = f"mysql+pymysql://sgn04088:whgudwns1997@localhost:3306/sqlmodel"


async_engine = create_async_engine(
    mariadb_url.replace("pymysql", "aiomysql"), echo=True
)


async def async_create_heroes(asession: AsyncSession):
    hero_1 = Hero(name="Deadpond", secret_name="Dive Wilson")
    asession.add(hero_1)
    return hero_1


async def get_heroes(asession: AsyncSession):
    statement = select(Hero)
    results = await asession.execute(statement)
    heroes = results.scalars().all()
    return heroes


async def main():
    AsyncSessionLocal = async_sessionmaker(
        async_engine, expire_on_commit=False, class_=AsyncSession
    )
    async with AsyncSessionLocal.begin() as asession:
        hero = await async_create_heroes(asession)
        print(hero)

        heroes = await get_heroes(asession)
        # select_heroes()
        for hero in heroes:
            print(hero)
        # await asession.close()

    await async_engine.dispose()


if __name__ == "__main__":
    import asyncio

    asyncio.run(main())
